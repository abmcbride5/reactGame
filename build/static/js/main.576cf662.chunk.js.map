{"version":3,"sources":["containers/letter.js","containers/table.js","containers/flame.js","containers/bomb.js","containers/gameOver.js","helperFunctions/words.js","App.js","serviceWorker.js","index.js"],"names":["Letter","props","state","letter","correct","checkLetter","bind","event","target","value","this","burnFuse","console","log","setState","className","type","onChange","size","maxLength","React","Component","Table","holder","createTable","table","children","i","word","length","push","Flame","Bomb","createFuse","burnedStart","wrongAnswers","GameOver","words","App","Math","floor","random","chances","incrementWrongAnswers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.576cf662.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/letter.css';\n\nclass Letter extends React.Component{\n    //this component will produce an input the will\n    //take one letter, check if it is correct and \n    // change the isCorrect boolean accordingly\n\n    constructor(props){\n        super(props);\n        this.state = {\n            letter: '',\n            correct: false,\n        };\n\n        this.checkLetter = this.checkLetter.bind(this);\n        \n    }\n\n    checkLetter(event){\n        //checks to see if the letter is correct for the position\n        if (event.target.value === this.props.letter){\n            this.setState({\n                letter: event.target.value,\n                correct: true,    \n            })\n            return\n        }\n        if (!this.state.correct){\n            this.props.burnFuse()\n            console.log(\"burn Fuse!\")\n        }\n    }\n    render(){\n        return(\n            <div className=\"letterBox\">\n               {this.state.correct === true ? <p>{this.props.letter}</p> : <input \n                type=\"text\" \n                onChange={this.checkLetter} \n                value={this.state.letter} \n                size=\"1\"\n                maxLength=\"1\"\n                />}\n            </div>\n        );\n    }  \n}\n\nexport default Letter;","import React from 'react';\nimport Letter from './letter';\nimport '../css/table.css';\n\nclass Table extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            holder: 1\n        }\n\n        this.createTable = this.createTable.bind(this);\n    }\n\n    createTable(){\n        let table = []\n        let children = []\n        for (let i = 0; i < this.props.word.length; i++){\n            children.push(<td><Letter burnFuse={this.props.burnFuse} letter={this.props.word[i]} /></td>)\n\n        }\n        table.push(<table><tbody><tr>{children}</tr></tbody></table>)\n        return table\n    }\n\n    render(){\n        return (\n            <div className=\"table\">\n                {this.createTable()}\n            </div>\n        )\n    }\n\n}\n\nexport default Table;","import React from 'react';\nimport '../css/flame.css';\n\nclass Flame extends React.Component{\n    \n\n    render(){\n        return(\n            \n            <div className=\"flame\">\n                <div className=\"red\">\n                </div>\n                <div className=\"red2\">\n                </div>\n                <div className=\"orange\">\n                </div>\n                <div className=\"orange2\">\n                </div>\n                <div className=\"yellow\">\n                </div>\n                <div className=\"yellow2\">\n                </div>\n                <div className=\"white\">\n                </div>\n                <div className=\"white2\">\n                </div>\n            </div>\n\n        )\n    }\n}\nexport default Flame;","import React from 'react';\nimport '../css/bomb.css';\nimport Flame from './flame';\n\nclass Bomb extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            holder: true,\n        }\n    \n    this.createFuse = this.createFuse.bind(this)\n    }\n\n    createFuse(){\n        let children = [];\n        let burnedStart = 9;\n\n        if (this.props.wrongAnswers > 0) {\n            burnedStart -= this.props.wrongAnswers;\n        }\n        for (let i = 1; i < 9; i++){\n            if (i < burnedStart){\n                children.push(<div className={`fuse${i}`}></div>)\n            } else if (i => burnedStart){\n                children.push(<div className={`fuse${i} burned${i}`}></div>)\n            }\n        }\n        \n        return children\n    }\n\n    render(){\n        return(\n            \n            <div className=\"bomb\">\n                <div className=\"fuseBody\">\n                {this.createFuse()}\n                </div>\n                <Flame />\n                <div className=\"top\"></div>\n                <div className=\"bombBody\">\n                    <div className=\"glare\"></div>\n                </div>\n               \n            </div>\n\n        )\n    }\n}\nexport default Bomb;","import React from 'react';\nimport '../css/gameOver.css';\n\nclass GameOver extends React.Component{\n    \n\n    render(){\n        return(\n            \n            <div className=\"gameOver\">\n                <h1>Game Over!!!</h1>\n            </div>\n\n        )\n    }\n}\nexport default GameOver;","const words = [\"wonder\", \"apple\", \"balloon\", \"sweater\", \"money\", \"hammer\", \"sissors\"];\n\nexport default words;","import React from 'react';\nimport './css/App.css';\nimport Table from './containers/table';\nimport Bomb from './containers/bomb';\nimport GameOver from './containers/gameOver';\nimport words from './helperFunctions/words';\n\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      word: words[Math.floor(Math.random() * words.length)],\n      chances: 8,\n      wrongAnswers: 0,\n    }\n    this.incrementWrongAnswers = this.incrementWrongAnswers.bind(this)\n  }\n \n  incrementWrongAnswers(){\n    this.setState({\n      wrongAnswers: this.state.wrongAnswers + 1,\n    })\n    console.log(this.state.wrongAnswers);\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <h1>Put Out The Fuse</h1>\n    {this.state.wrongAnswers < this.state.chances && <Bomb wrongAnswers={this.state.wrongAnswers} />}\n    {this.state.wrongAnswers === this.state.chances && <GameOver/>}\n    <Table word={this.state.word} burnFuse={this.incrementWrongAnswers} />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}